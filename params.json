{"name":"Retry-handler","body":"retry-handler\r\n=============\r\n\r\n特定の処理を実行したいんだけど、途中で何らかのエラーが発生した場合はリトライさせたい時に使えます。\r\n\r\n\r\n具体的にはこんな感じで書くと、処理の途中でエラーが発生しても指定した回数はリトライしてくれます。\r\n\r\n    Proc.retry(3,new Runnable() {\r\n   \r\n        @Override\r\n        public void run() {\r\n            //なんか処理\r\n        }\r\n    });\r\n\r\n\r\n特定のエラーの時だけリトライしたい時はそれも指定できます。\r\n\r\n例えば IOException とそのサブクラスのエラーの時のみリトライさせたい場合はこんな感じ\r\n\r\n    Proc.retry(3,new Runnable() {\r\n   \r\n        @Override\r\n        public void run() {\r\n            //なんか処理\r\n        }\r\n    }, IOException.class);\r\n\r\n\r\n処理をリトライするときに wait を入れることもできます。\r\n\r\n例えば 5 秒置いてからリトライさせたい場合はこんな感じ\r\n\r\n    Proc.retry(3,new Runnable() {\r\n    \r\n        @Override\r\n        public void run() {\r\n           //なんか処理\r\n        }\r\n    }, 5 * 1000);\r\n\r\n\r\nもちろん、上記を複合で指定することも可能です。\r\n\r\n例えば IOException とそのサブクラスのエラーの時のみ 5 秒置いてからリトライさせたい場合はこんな感じ\r\n\r\n    Proc.retry(3,new Runnable() {\r\n    \r\n        @Override\r\n        public void run() {\r\n            //なんか処理\r\n        }\r\n    }, 5 * 1000, IOException.class);\r\n\r\nとりあえず使い方はテスト見ればわかると思うので適当にどうぞ\r\n\r\n[![Build Status](https://secure.travis-ci.org/yoshiori/retry-handler.png?branch=master)](http://travis-ci.org/yoshiori/retry-handler)","tagline":"https://github.com/kimoto/retry-handler の Java 版 ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}